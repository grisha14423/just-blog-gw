- Страница со всеми заметками и возможностью добавления новой/удалением старых: NotesListPage

- Страница отдельной заметки с возможностью редактирования и удаления: EditNotePage

- Страницы входа / регистрации: Login

- Страница с детальным отображением одной заметки: NotePage

- В админке статистика по количеству заметок в системе:

FRONTEND

Используем библиотеку **React**. 

### Обязательно реализовать:

- **Список элементов**
    
    Выводим минимум 1 список элементов, полученных от сервера через `GET запрос`
    
- **Форма отправки**
    
    Реализовать минимум 2 формы для отправки данных на сервер через `POST запрос`
    
- **Страницы**
    
    Всего минимум 3 страницы на сайте, реализованных с помощью `React Router`
    
- **Страница одного элемента**
    
    Страница получает и выводит информацию с сервера через `GET запрос` по параметру из URL. 
    
    Пример для [блога]: `'/posts/42'`
    Если перейти по этому пути, должен отправиться запрос на сервер, найти пост с id = **42** и вывести информацию о нем. **
    
- **Приватные страницы**
    
    Страницы, доступные только авторизованным пользователям `Private Routes`
    Например, если это [блог], добавление новых постов должно быть доступно только авторизованным пользователям. 
    
- **Использование библиотеки для управления состоянием**
    
    Использование `Redux` в проекте. 
    Например, сохранение объекта авторизованного пользователя.
    
- **Редактирование элементов**
    
    Возможность обновить данные на сервере через `PUT/PATCH запросы`
    Например, если это [блог], должна быть возможность редактирования постов. 
    
- **Удаление элементов**
    
    Возможность удалять данные на сервере через `DELETE запрос`
    Например, если это [блог], должна быть возможность удаления постов. 
    
- **Кастомные хуки**
    
    Реализовать минимум 1 собственный хук `React Hooks`
   
- **Загрузка...**
    
    При любом ожидании пользователя должен появляться индикатор загрузки `Loader`
    Подойдет любой лоадер, который впишется в дизайн. 
    
- **Базовые компоненты**
    
    Основные сущности, которые используются много раз во всем приложении, выносим в отдельные базовые компоненты (`input`, `button` и т. д.)
    
### Дополнительно:

- **Работа со сторонними сервисами**
    
    Вы можете использовать в своем приложении любые `сторонние API`
    Например, в приложении "Прогноз погоды" используется стороннее API, предоставлящее необходимые данные о погоде. 
    
- **Разные шаблоны страниц**
    
    У страниц, сильно не похожих друг на друга, должны быть разные шаблоны `Layout`
    Например, в одном шаблоне есть верхнее навигационное меню и боковое меню, а в другом шаблоне этого не будет.


## BACKEND

Используем **Node.js**, **Express**, **MongoDB**. Для более простой настройки можно использовать облачную базу данных [**MongoDB Atlas Cloud Database**](https://www.mongodb.com/cloud/atlas)

### Обязательно реализовать:

- **Настройка Express**
    
    С помощью Express нужно добавить все роуты, необходимые приложению для работы по `REST API`. На них будут отправляться запросы от Frontend части. 
    Например, если это [блог], для получения данных о посте с id = **42** необходимо выполнить `GET запрос` на `'/api/post/42'`
    
- **Все виды запросов**
    
    Минимум 1 раз реализуйте работу с каждым из запросов: `GET`, `POST`, `PUT и/или PATCH`, `DELETE`
    
- **Использование промежуточных обработчиков**
    
    Необходимо добавить минимум 1 кастомный `middleware` в проект.
    Например, для проверки авторизации пользователя в момент запроса к приватным данным. 
    
- **Модели mongoose**
    
    Для всех сущностей, которые будут храниться в MongoDB, создаем модель  `mongoose`
    Например, если это [блог], будет модель поста, пользователя. 
    
- **Авторизация и регистрация**
    
    Реализуйте функционал создания аккаунта и входа в него. 
    Используйте для этого `JSON Web Token (JWT)`
    

### Дополнительно:

- **Восстановление пароля**


    Внизу формы авторизации можно добавить кнопку "Забыли пароль". При клике на неё начнется процедура по восстановлению пароля.


Деплой можно реализовать любым удобным способом (например, использовать платформу Heroku). Также при желании можно реализовать деплой с использованием Docker